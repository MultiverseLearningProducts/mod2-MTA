["<p><img src=\"https://di3xp7dfi3cq.cloudfront.net/pub/media/magefan_blog/w/h/what-jobs-can-you-get-with-mta-cetification.jpg\" alt=\"microsoft certificate\"></p>\n<h2>You are going to be come a Microsoft Technical Associate by gaining an industry recognised qualification.</h2>\n<p>We are going to build a frontend application that will use or touch upon all the knowledge required to pass the Microsoft Technical Associate Exam (MTA 70-480 Programming in HTML5 with JavaScript and CSS3). It is a peer to peer audio composition app where you can create tracks, play them back, share them with the network of other composers, and play their compositions in your player.</p>\n<p>Along the way you’ll come across; italic bullet points, these are the MTA learning objectives, slide shows these usually require a little commentary from your coach, but often contain useful coding examples, links and mini quizzes that test your knowledge. At the end of the module you’ll have lots of practice questions to test your understanding and get used to the style of exam questions.</p>\n","<h1>HTML</h1>\n<ul>\n<li><em>1.1 Create the document structure by using HTML Structure the UI by using semantic markup, including for search engines and screen readers (Section, Article, Nav, Header, Footer, and Aside); create a layout container in HTML</em></li>\n</ul>\n<p>Lets start with a good basis for our application by creating the HTML structure and style it using a responsive flexible css grid layout.</p>\n<p>We are going to use semantic HTML elements. Semantics is the study of the meanings of words and phrases in a language. Semantic elements are elements with a meaning.</p>\n<p>Look at the examples below.</p>\n<pre><code class=\"hljs language-html\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/shop\"</span>&gt;</span>Shop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/images/slipper-01.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"slipper 01\"</span> /&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>£29.99<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Add to Cart<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/images/slipper-02.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"slipper 02\"</span> /&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>£29.99<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Add to Cart<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/images/slipper-03.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"slipper 03\"</span> /&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>£29.99<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Add to Cart<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>my slipper company<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre>\n<p>Whilst this is valid HTML it does not have much meaning. By using the semantic elements we can layout our page structure in the same way, but also communicate to other programs that read our HTML how to treat the different areas. Those other programs might be, a search engine indexing our page, a screen reader, different browsers rendering out page. For example google uses the <code>&lt;article&gt;</code> elements to determine the subject of a page.</p>\n<p>Let us have a look at the same layout but use semantic elements.</p>\n<pre><code class=\"hljs language-html\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/shop\"</span>&gt;</span>Shop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hgroup</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Slipper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Our most comfortable<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hgroup</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figure</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/images/slipper-01.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"slipper 01\"</span> /&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figcaption</span>&gt;</span>£29.99<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figcaption</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figure</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Add to Cart<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>my slipper company<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">HTML elements</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&lt;header&gt;</code></td>\n<td style=\"text-align:left\">Defines the top of a section or page</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;main&gt;</code></td>\n<td style=\"text-align:left\">Represents the dominant content of the of a document or component</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;footer&gt;</code></td>\n<td style=\"text-align:left\">Defines the bottom of a section or page or component</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;article&gt;</code></td>\n<td style=\"text-align:left\">Defines self-contained areas on a page</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;nav&gt;</code></td>\n<td style=\"text-align:left\">Defines navigation to other pages in the site</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;hgroup&gt;</code></td>\n<td style=\"text-align:left\">Defines a group of headings (H1–H6 elements) *this is now depreciated</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;figure&gt;</code></td>\n<td style=\"text-align:left\">Defines content that contains a figure, such as an image, chart, or picture</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;figcaption&gt;</code></td>\n<td style=\"text-align:left\">Defines the caption of a figure element</td>\n</tr>\n</tbody>\n</table>\n<p>In addition to the elements above you should also know about and try to use the following:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">HTML elements</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&lt;aside&gt;</code></td>\n<td style=\"text-align:left\">Defines smaller content areas outside the flow of a webpage</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;mark&gt;</code></td>\n<td style=\"text-align:left\">Defines text that should be highlighted</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;progress&gt;</code></td>\n<td style=\"text-align:left\">Defines the progress of the task</td>\n</tr>\n</tbody>\n</table>\n<h2>Using the <code>&lt;hgroup&gt;</code> element</h2>\n<p>The <code>&lt;hgroup&gt;</code> element is a semantic method that organises headers and sub-headers. This element typically contains the standard and familiar <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> elements. The <code>&lt;hgroup&gt;</code> element groups related headers in sequence.</p>\n<h2>Using the <code>&lt;progress&gt;</code> element</h2>\n<p>The <code>&lt;progress&gt;</code> element represents the progress of an objective or task. The two supported types of progress tasks are <strong>determinate</strong> and <strong>indeterminate</strong>.</p>\n<p>Use a <strong>determinate</strong> progress task when you know in advance the amount of work to be completed; in other words, you know the starting and ending values. Sample scenarios for this case include downloading a file for which you know the exact size or displaying the progress of a fundraising effort. In both situations, you know the exact status of the task at any particular time, and you also know what the end goal is—either the number of bytes for the file download or the number of dollars for the fundraiser. In these determinate cases, you can specify HTML5 markup such as this:</p>\n<pre><code class=\"hljs language-html\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Our goal is to have 1000 users:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">progress</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"50\"</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">\"1000\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">progress</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>1000<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n</code></pre>\n<p><progress value=\"50\" max=\"1000\"></progress></p>\n<p>As shown in the preceding code, the <code>&lt;progress&gt;</code> element has two attributes you need to know: value and max. The value attribute lets you specify the current value or position of the <code>&lt;progress&gt;</code> element at a specific point in time. The max attribute tells the browser what the maximum possible value is for the element. The browser uses these two values to determine how much of the element should be coloured in. So if I change the value to 750 the progress bar displays the new value like this:</p>\n<p><progress value=\"750\" max=\"1000\"></progress></p>\n<p>You use <strong>indeterminate</strong> tasks when you don’t know how long a task will take to complete but still want to show users that some work is occurring and that they should wait. When you don’t specify the value attribute, the browser can infer that the <code>&lt;progress&gt;</code> element represents an indeterminate task.</p>\n<p><progress></progress></p>\n<p>Downloading…</p>\n<p>Can you see the bar is subtly pulsing?</p>\n<h2>Using the <code>&lt;mark&gt;</code> element</h2>\n<pre><code class=\"hljs\">Use the `&lt;mark&gt;` element to &lt;mark&gt;highlight&lt;/mark&gt; text\n</code></pre>\n<p>Use the <code>&lt;mark&gt;</code> element to <mark>highlight</mark> text.</p>\n<p>You have now been introduced to the HTML elements you’ll need to know about for the exam. We can use these to layout our app’s page.</p>\n","<h1>Typography</h1>\n<ul>\n<li><em>4.1 Style HTML text properties Apply styles to text appearance (color, bold, italics); apply styles to text font (WOFF and @font-face, size); apply styles to text alignment, spacing, and indentation; apply styles to text hyphenation; apply styles for a text drop shadow</em></li>\n</ul>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQcGnwBPI463TQAmkOAyVjGNwNZVPwZKtDN0plA4C8Tgicad6fYLZ33qhWy3sxnmNyNXwoQJGKpJemc/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>Choose a <a href=\"https://fonts.google.com/\">font</a> for your application and use <strong>@font-face</strong> to load it.</p>\n","<h1>The Box Model</h1>\n<ul>\n<li><em>4.2 Style HTML box properties Apply styles to alter appearance attributes (size, border and rounding border corners, outline, padding, margin); apply styles to alter graphic effects (transparency, opacity, background image, gradients, shadow, clipping); apply styles to establish and change an element’s position (static, relative, absolute, fixed)</em></li>\n</ul>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vR9fXGQK-iEBE2zaLeilLJlAM0_90xheU8S1VTGyvT08hmVuKDK-sPlL34MeXf3bv-Pl8zBw9caaHti/embed?start=false&amp;loop=true&amp;delayms=60000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>Every HTML element has box properties. These are the properties that control how the element is spaced on the page and control the position of the box contents. In addition, the graphic effects can be applied to the box of an element.</p>\n<p>The border element supports many variants in its ability to set properties in a single line. Take some time to experiment with all the possible combinations so you will be able to read them and identify them easily on the exam.</p>\n<p>CSS3 allows you to style box properties in the following ways:</p>\n<ul>\n<li>Every HTML element is a box and has the properties of a box such as height and width.</li>\n<li>CSS3 allows you to change the size of a box by specifying a new height and width.</li>\n<li>The border-style property allows you to specify a solid or dashed line for the border.</li>\n<li>The border-color property allows you to specify the color of the border.</li>\n<li>The border-spacing property allows you to specify the amount of space between adjacent elements</li>\n<li>The border-width property allows you to specify a thickness for the border.</li>\n<li>Each side of the box can by styled differently.</li>\n<li>CSS3 provides a way to define the padding and margin that a box should have relative to adjacent elements. This can be configured differently for each side of the box.</li>\n<li>An element can be made transparent or partially transparent by setting the opacity property.</li>\n<li>An element can contain a background image by setting its background-image property.</li>\n<li>CSS3 provides the ability to create shadow effects by specifying the box-shadow property.</li>\n<li>CSS3 provides the ability to clip images using the clip property to show only a portion of an image.</li>\n<li>CSS3 can be used to establish an element’s position as either fixed, absolute, or relative.</li>\n<li>The left and top CSS properties can be used to alter an element’s position.</li>\n</ul>\n<h1>Responsive Layouts</h1>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRUJJDlTFSLduiExxM64ScDeuOxSNQz12qkqPJy0MIBTyhv-dI74jnG7mbuumI9eHXrUI3DZ2wPz3QV/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<h1>CSS selectors</h1>\n<p>Before we go much further lets take a good look at CSS selectors.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQnSLd9aR-oTZ2rBFNX_tPXh5gAdcn3s3qRjciRxuzGisT6caCl-7IOt3jLBtF3l9VF8xLT52mwewmv/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>Our audio app is going to need the following sections:</p>\n<ul>\n<li>a header area to brand our app</li>\n<li>a place for the interactive grid</li>\n<li>a nav area for the control buttons; play and stop</li>\n<li>a place to list tracks</li>\n<li>an area for our audio visualisations</li>\n<li>a footer for credits</li>\n</ul>\n<p>Create a responsive layout that has a place for all of these sections. Use your knowledge of HTML semantic elements and the box model. Start with a mobile layout by copying the css styles below, then adjust the style for different break points. As your screen grows in scale and crosses a break point, different css rules will be applied.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* css for mobile goes here */</span>\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span> <span class=\"hljs-number\">30em</span>) {\n  <span class=\"hljs-comment\">/* css for small screens goes here */</span>\n}\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span> <span class=\"hljs-number\">30em</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width:</span> <span class=\"hljs-number\">60em</span>) {\n  <span class=\"hljs-comment\">/* css for mid screens goes here */</span>\n}\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span> <span class=\"hljs-number\">60em</span>) {\n  <span class=\"hljs-comment\">/* css for massive screens goes here */</span>\n}\n</code></pre>\n","<p>\n<section id=\"W3FdIEluIHRoZSAcQm94IE1vZGVsHSB3aGF0IGlzIHRoZSBjb3JyZWN0IG9yZGVyIG9mIGVsZW1lbnRzIChmcm9tIHRoZSBpbnNpZGUgb3V0KT8=\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">In the “Box Model” what is the correct order of elements (from the inside out)?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyNdIGRpbWVuc2lvbnMsIHBhZGRpbmcsIGJvcmRlciwgbWFyZ2lu\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBJbiB0aGUgHEJveCBNb2RlbB0gd2hhdCBpcyB0aGUgY29ycmVjdCBvcmRlciBvZiBlbGVtZW50cyAoZnJvbSB0aGUgaW5zaWRlIG91dCk/JywgJ1sjXSBkaW1lbnNpb25zLCBwYWRkaW5nLCBib3JkZXIsIG1hcmdpbicsICdbI10gZGltZW5zaW9ucywgcGFkZGluZywgYm9yZGVyLCBtYXJnaW4nXX0=')\">dimensions, padding, border, margin</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIG1hcmdpbiwgcGFkZGluZywgZGltZW5zaW9ucywgYm9yZGVy\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBJbiB0aGUgHEJveCBNb2RlbB0gd2hhdCBpcyB0aGUgY29ycmVjdCBvcmRlciBvZiBlbGVtZW50cyAoZnJvbSB0aGUgaW5zaWRlIG91dCk/JywgJ1sgXSBtYXJnaW4sIHBhZGRpbmcsIGRpbWVuc2lvbnMsIGJvcmRlcicsICdbI10gZGltZW5zaW9ucywgcGFkZGluZywgYm9yZGVyLCBtYXJnaW4nXX0=')\">margin, padding, dimensions, border</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIHBhZGRpbmcsIGRpbWVuc2lvbnMsIGJvcmRlciwgbWFyZ2lu\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBJbiB0aGUgHEJveCBNb2RlbB0gd2hhdCBpcyB0aGUgY29ycmVjdCBvcmRlciBvZiBlbGVtZW50cyAoZnJvbSB0aGUgaW5zaWRlIG91dCk/JywgJ1sgXSBwYWRkaW5nLCBkaW1lbnNpb25zLCBib3JkZXIsIG1hcmdpbicsICdbI10gZGltZW5zaW9ucywgcGFkZGluZywgYm9yZGVyLCBtYXJnaW4nXX0=')\">padding, dimensions, border, margin</article>\n            </section></p>\n<p>\n<section id=\"W3FdIEdpdmVuIGFuIGVsZW1lbnQgdGhhdCBpcyAyMDBweCB3aWRlLCB3aXRoIGEgcGFkZGluZyBvZiAxMHB4LCBhIG1hcmdpbiBvZiA1cHggYW5kIGEgYm9yZGVyIG9mIDFweCAtIGhvdyB3aWRlIGlzIHRoaXMgZWxlbWVudCB3aGVuIGl0GXMgaW4gdGhlIERPTS4=\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">Given an element that is 200px wide, with a padding of 10px, a margin of 5px and a border of 1px - how wide is this element when it’s in the DOM.</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyBdIDMyMw==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBHaXZlbiBhbiBlbGVtZW50IHRoYXQgaXMgMjAwcHggd2lkZSwgd2l0aCBhIHBhZGRpbmcgb2YgMTBweCwgYSBtYXJnaW4gb2YgNXB4IGFuZCBhIGJvcmRlciBvZiAxcHggLSBob3cgd2lkZSBpcyB0aGlzIGVsZW1lbnQgd2hlbiBpdBlzIGluIHRoZSBET00uJywgJ1sgXSAzMjMnLCAnWyNdIDIzMiddfQ==')\">323</article><article class=\"scorm-quiz-answer noselect\" id=\"WyNdIDIzMg==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBHaXZlbiBhbiBlbGVtZW50IHRoYXQgaXMgMjAwcHggd2lkZSwgd2l0aCBhIHBhZGRpbmcgb2YgMTBweCwgYSBtYXJnaW4gb2YgNXB4IGFuZCBhIGJvcmRlciBvZiAxcHggLSBob3cgd2lkZSBpcyB0aGlzIGVsZW1lbnQgd2hlbiBpdBlzIGluIHRoZSBET00uJywgJ1sjXSAyMzInLCAnWyNdIDIzMiddfQ==')\">232</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIDIyMg==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBHaXZlbiBhbiBlbGVtZW50IHRoYXQgaXMgMjAwcHggd2lkZSwgd2l0aCBhIHBhZGRpbmcgb2YgMTBweCwgYSBtYXJnaW4gb2YgNXB4IGFuZCBhIGJvcmRlciBvZiAxcHggLSBob3cgd2lkZSBpcyB0aGlzIGVsZW1lbnQgd2hlbiBpdBlzIGluIHRoZSBET00uJywgJ1sgXSAyMjInLCAnWyNdIDIzMiddfQ==')\">222</article>\n            </section></p>\n<p>\n<section id=\"W3FdIFlvdSBuZWVkIHRvIGFkZCBzb21lIGJ1dHRvbnMgdGhhdCB3aWxsIGNvbnRyb2wgYSBjYXJvdXNlbCBvZiBpbWFnZXMuIFRoZSBidXR0b25zIHdpbGwgYmUgbGFiZWxsZWQgHFByZXYdIGFuZCAcTmV4dB0uIFdoaWNoIEhUTUwgZWxlbWVudCBzaG91bGQgeW91IHVzZSBhcyBhIHBhcmVudCBmb3IgdGhlc2UgYnV0dG9ucz8=\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">You need to add some buttons that will control a carousel of images. The buttons will be labelled “Prev” and “Next”. Which HTML element should you use as a parent for these buttons?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyBdIGRpdg==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBZb3UgbmVlZCB0byBhZGQgc29tZSBidXR0b25zIHRoYXQgd2lsbCBjb250cm9sIGEgY2Fyb3VzZWwgb2YgaW1hZ2VzLiBUaGUgYnV0dG9ucyB3aWxsIGJlIGxhYmVsbGVkIBxQcmV2HSBhbmQgHE5leHQdLiBXaGljaCBIVE1MIGVsZW1lbnQgc2hvdWxkIHlvdSB1c2UgYXMgYSBwYXJlbnQgZm9yIHRoZXNlIGJ1dHRvbnM/JywgJ1sgXSBkaXYnLCAnWyNdIG5hdiddfQ==')\">div</article><article class=\"scorm-quiz-answer noselect\" id=\"WyNdIG5hdg==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBZb3UgbmVlZCB0byBhZGQgc29tZSBidXR0b25zIHRoYXQgd2lsbCBjb250cm9sIGEgY2Fyb3VzZWwgb2YgaW1hZ2VzLiBUaGUgYnV0dG9ucyB3aWxsIGJlIGxhYmVsbGVkIBxQcmV2HSBhbmQgHE5leHQdLiBXaGljaCBIVE1MIGVsZW1lbnQgc2hvdWxkIHlvdSB1c2UgYXMgYSBwYXJlbnQgZm9yIHRoZXNlIGJ1dHRvbnM/JywgJ1sjXSBuYXYnLCAnWyNdIG5hdiddfQ==')\">nav</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIHNlY3Rpb24=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBZb3UgbmVlZCB0byBhZGQgc29tZSBidXR0b25zIHRoYXQgd2lsbCBjb250cm9sIGEgY2Fyb3VzZWwgb2YgaW1hZ2VzLiBUaGUgYnV0dG9ucyB3aWxsIGJlIGxhYmVsbGVkIBxQcmV2HSBhbmQgHE5leHQdLiBXaGljaCBIVE1MIGVsZW1lbnQgc2hvdWxkIHlvdSB1c2UgYXMgYSBwYXJlbnQgZm9yIHRoZXNlIGJ1dHRvbnM/JywgJ1sgXSBzZWN0aW9uJywgJ1sjXSBuYXYnXX0=')\">section</article>\n            </section></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">aside</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n}\n<span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span> <span class=\"hljs-number\">30em</span>) {\n    <span class=\"hljs-selector-tag\">aside</span> {\n        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">22%</span>;\n    }\n}\n</code></pre>\n<p>\n<section id=\"W3FdIENvbnNpZGVyIHRoZSBjc3MgYWJvdmUuIEhvdyB3aWRlIHdpbGwgdGhlIGFzaWRlIGVsZW1lbnQgYmUgb24gbXkgbGFwdG9wPw==\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">Consider the css above. How wide will the aside element be on my laptop?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyBdIDEwMCU=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBDb25zaWRlciB0aGUgY3NzIGFib3ZlLiBIb3cgd2lkZSB3aWxsIHRoZSBhc2lkZSBlbGVtZW50IGJlIG9uIG15IGxhcHRvcD8nLCAnWyBdIDEwMCUnLCAnWyNdIDIyJSddfQ==')\">100%</article><article class=\"scorm-quiz-answer noselect\" id=\"WyNdIDIyJQ==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBDb25zaWRlciB0aGUgY3NzIGFib3ZlLiBIb3cgd2lkZSB3aWxsIHRoZSBhc2lkZSBlbGVtZW50IGJlIG9uIG15IGxhcHRvcD8nLCAnWyNdIDIyJScsICdbI10gMjIlJ119')\">22%</article>\n            </section></p>\n<p>\n<section id=\"W3FdIFdoZXJlIG1pZ2h0IHRoZSBwc2V1ZG8gc2VsZWN0b3IgOnRhcmdldCBjb21lIGluIHVzZWZ1bD8=\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">Where might the pseudo selector :target come in useful?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyBdIHN0eWxpbmcgdGhlIHZhbHVlIG9mIGEgZmllbGQgYWZ0ZXIgYW4gZXJyb3I=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGVyZSBtaWdodCB0aGUgcHNldWRvIHNlbGVjdG9yIDp0YXJnZXQgY29tZSBpbiB1c2VmdWw/JywgJ1sgXSBzdHlsaW5nIHRoZSB2YWx1ZSBvZiBhIGZpZWxkIGFmdGVyIGFuIGVycm9yJywgJ1sjXSBzdHlsaW5nIGEgbmF2aWdhdGlvbiBpdGVtJ119')\">styling the value of a field after an error</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIHN0eWxpbmcgYSBwYXJ0aWN1bGFyIHJvdyBpbiBhIHRhYmxl\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGVyZSBtaWdodCB0aGUgcHNldWRvIHNlbGVjdG9yIDp0YXJnZXQgY29tZSBpbiB1c2VmdWw/JywgJ1sgXSBzdHlsaW5nIGEgcGFydGljdWxhciByb3cgaW4gYSB0YWJsZScsICdbI10gc3R5bGluZyBhIG5hdmlnYXRpb24gaXRlbSddfQ==')\">styling a particular row in a table</article><article class=\"scorm-quiz-answer noselect\" id=\"WyNdIHN0eWxpbmcgYSBuYXZpZ2F0aW9uIGl0ZW0=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGVyZSBtaWdodCB0aGUgcHNldWRvIHNlbGVjdG9yIDp0YXJnZXQgY29tZSBpbiB1c2VmdWw/JywgJ1sjXSBzdHlsaW5nIGEgbmF2aWdhdGlvbiBpdGVtJywgJ1sjXSBzdHlsaW5nIGEgbmF2aWdhdGlvbiBpdGVtJ119')\">styling a navigation item</article>\n            </section></p>\n<p>\n<section id=\"W3FdIFdoaWNoIG9mIHRoZXNlIGlzIE5PVCBhIHBzZXVkbyBzZWxlY3Rvcj8=\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">Which of these is NOT a pseudo selector?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyNdIDpmaXJzdC1yb3c=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBvZiB0aGVzZSBpcyBOT1QgYSBwc2V1ZG8gc2VsZWN0b3I/JywgJ1sjXSA6Zmlyc3Qtcm93JywgJ1sjXSA6Zmlyc3Qtcm93J119')\">:first-row</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIDpmaXJzdC1jaGlsZA==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBvZiB0aGVzZSBpcyBOT1QgYSBwc2V1ZG8gc2VsZWN0b3I/JywgJ1sgXSA6Zmlyc3QtY2hpbGQnLCAnWyNdIDpmaXJzdC1yb3cnXX0=')\">:first-child</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIDpmaXJzdC1sZXR0ZXI=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBvZiB0aGVzZSBpcyBOT1QgYSBwc2V1ZG8gc2VsZWN0b3I/JywgJ1sgXSA6Zmlyc3QtbGV0dGVyJywgJ1sjXSA6Zmlyc3Qtcm93J119')\">:first-letter</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIDpmaXJzdC1saW5l\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBvZiB0aGVzZSBpcyBOT1QgYSBwc2V1ZG8gc2VsZWN0b3I/JywgJ1sgXSA6Zmlyc3QtbGluZScsICdbI10gOmZpcnN0LXJvdyddfQ==')\">:first-line</article>\n            </section></p>\n","<h1>Javascript</h1>\n<p>You should now have created the layout of your audio app using semantic HTML elements. Now we want to start introducing some interactivity and that is going to require some javascript.</p>\n<p>The browser has a set of web apis that we can use with Javascript to manipulate the DOM (document object model). For example we can use the keyword <code>document</code> in Javascript to access the DOM and that <code>document</code> object provides methods we can call to select and change elements on the page.</p>\n<p>For example if we have a DOM element with an id attribute of “grid”, we can access that DOM element using:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> grid = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"grid\"</span>)\n</code></pre>\n<p>Now we have got hold of that element we can alter it…</p>\n<pre><code class=\"hljs language-javascript\">grid.classList.add(<span class=\"hljs-string\">\"playing\"</span>)\n</code></pre>\n<p>We can even add to it…</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> newThing = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"div\"</span>)\ngrid.appendChild(newThing)\n</code></pre>\n<p>With plain javascript this api can be quite verbose and awkward to use. It is for this reason that the <a href=\"https://jquery.com/\">jQuery</a> became really popular. We are going to use the jQuery library to build our music app.</p>\n<h2>Including jQuery on the page</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>\n            <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://code.jquery.com/jquery-3.5.1.slim.min.js\"</span>\n            <span class=\"hljs-attr\">integrity</span>=<span class=\"hljs-string\">\"sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=\"</span>\n            <span class=\"hljs-attr\">crossorigin</span>=<span class=\"hljs-string\">\"anonymous\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Javascript files are loaded in order on the page. So you MUST load jQuery first -&gt; then the DOM -&gt; then your javascript. If you load your javascript before jQuery or the DOM if you target elements before they have loaded your code might fail or error.</p>\n<p>You can wait for the page to load before calling your javascript. Using jQuery this is easy todo by ensuring all your code is called in side the following wrapper around the onload event that the DOM fires when everything has arrived over the wire.</p>\n<pre><code class=\"hljs language-javascript\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// you code goes in here</span>\n})\n</code></pre>\n<h2>Using jQuery</h2>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTh5GmIGakI6Fo7RrT7bZs-h3Qr6GgiJfOKQLY03z230s__zsaRuGwTssYJaVGWu4Es2PvwGPKJJXbo/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<h2>Making a start</h2>\n<p>The first thing we want to do is create one of the building blocks of the app; an interactive note. We can arrange these notes into an 8 x 4 grid, and offer the user a UI to compose tracks.</p>\n<p>A note will be stateful, it can be selected and unselected. It should light up when it is in a bar that is being played. It needs to be clickable, toggling on and off, and it needs to emit a tone.</p>\n<p>To me it makes sense to conceptually tie all this state and functionality together into an object in our programme.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Note</span> </span>{\n\t<span class=\"hljs-keyword\">constructor</span>(freq) {\n\t\t<span class=\"hljs-keyword\">this</span>.freq = freq\n\t\t<span class=\"hljs-keyword\">this</span>.selected = <span class=\"hljs-literal\">false</span>\n\t\t<span class=\"hljs-keyword\">this</span>.el = $(<span class=\"hljs-string\">\"&lt;samp&gt;&lt;/samp&gt;\"</span>)\n\t\t<span class=\"hljs-keyword\">this</span>.el.on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-keyword\">this</span>.toggle.bind(<span class=\"hljs-keyword\">this</span>))\n\t\t<span class=\"hljs-keyword\">this</span>.renderSelected()\n\t}\n\ttoggle (evt) {\n\t\t<span class=\"hljs-keyword\">this</span>.selected = !<span class=\"hljs-keyword\">this</span>.selected\n\t\t<span class=\"hljs-keyword\">this</span>.renderSelected()\n\t}\n\trenderSelected () {\n\t\t<span class=\"hljs-keyword\">this</span>.el.removeClass([<span class=\"hljs-string\">\"selected\"</span>, <span class=\"hljs-string\">\"unselected\"</span>])\n\t\t<span class=\"hljs-keyword\">this</span>.el.addClass(<span class=\"hljs-keyword\">this</span>.selected ? <span class=\"hljs-string\">\"selected\"</span> : <span class=\"hljs-string\">\"unselected\"</span>)\n\t}\n}\n</code></pre>\n<p>This is a class definition, a blueprint for notes. It is a constructor function that can be called with the <code>new</code> keyword. Instantiating a new instance of a note using the <code>new </code>keyword will cause the constructor function to run.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">new</span> Note(<span class=\"hljs-number\">740</span>)\n</code></pre>\n<p>The class above has a property called selected that starts its life being false. The <code>this.el</code> is short for this.element and is an DOM fragment that the constructor function adds a click event listener and handler too, then adds variable classes (renderSelected).</p>\n<h2>Display the note</h2>\n<p>Make sure you have an empty element on the page with an id of <code>grid</code> as the code below will want to append itself to that parent element.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> note = <span class=\"hljs-keyword\">new</span> Note(<span class=\"hljs-number\">740</span>)\n$(<span class=\"hljs-string\">\"#grid\"</span>).append(note.el)\n</code></pre>\n<p>create an instance of a note with a frequency of 740, then add it to the DOM. You should check that the note has been added to the HTML.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">samp</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"unselected\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">samp</span>&gt;</span>\n</code></pre>\n<p>You should be able to toggle the classes.</p>\n<h2><code>this</code> Context</h2>\n<p>You’ll notice that the following line uses the <code>bind</code> property.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">this</span>.el.on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-keyword\">this</span>.toggle.bind(<span class=\"hljs-keyword\">this</span>))\n</code></pre>\n<p><code>this.el</code> is a DOM fragment wrapped by jQuery, so we can add event listeners using <code>.on</code>. We give it two arguments.</p>\n<ol>\n<li>name of the event as a string ‘click’</li>\n<li>the function to call when the element is clicked</li>\n</ol>\n<p>In our class <code>this</code> has meaning. It means the context of the instance of the Note class. But there are other contexts to consider too. The DOM element <code>$(&quot;&lt;samp&gt;&lt;/samp&gt;&quot;)</code> also has a <code>this</code> context.</p>\n<p>We want the click handler <code>this.toggle</code> to have as it’s context the instance of the Note class. NOT the context of the DOM element on the page. So we <code>bind</code> the classes meaning of <code>this</code> to the toggle function, so when it is called as a result of a DOM element being clicked, then it can correctly reference <code>this.selected</code> and <code>this.renderSelected</code>.</p>\n<p>Try this code for yourself. What happens if you don’t use bind? How would you add a few notes? Can you organise the notes into an 8 x 4 grid?</p>\n<p>You will need some css to style the note:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">samp</span> {\n  <span class=\"hljs-attribute\">display</span>: inline-block;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">3rem</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">3rem</span>;\n  <span class=\"hljs-attribute\">margin</span>: .<span class=\"hljs-number\">25rem</span>;\n}\n<span class=\"hljs-selector-class\">.selected</span> {\n  <span class=\"hljs-attribute\">background-color</span>: hotpink;\n}\n<span class=\"hljs-selector-class\">.unselected</span> {\n  <span class=\"hljs-attribute\">background-color</span>: orchid;\n}\n</code></pre>\n<p>What css could you use to set up an 8 x 4 grid?</p>\n","<h1>WebWorkers</h1>\n<p>For our audio app to work we need something in our programme that acts like a beating heart or a ticking clock. This tick will move the playhead from bar to bar and enable us to trigger the playing of notes from our audio grid.</p>\n<p>As you can imagine it will be important that our beat is even and steady. We don’t want the regular ticking to be screwed by other demands on the javascript execution thread that might be made, by animations for example. This is a good case for a WebWorker</p>\n<h2>What is a WebWorker?</h2>\n<ul>\n<li><em>2.5 Create a web worker process Start and stop a web worker; pass data to a web worker; configure timeouts and intervals on the web worker; register an event listener for the web worker; limitations of a web worker</em></li>\n</ul>\n<p>A WebWorker is a separate process that we can run in the browser.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vSFOdHco9hALnllqPomOzNP9naeYSLoOv8K0GrNMIuA-DVjNLbQ5eOJ9i9H-ARbl0n3XyBEKlqGDjmc/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<h2>Setting up the audio engine’s tick</h2>\n<ul>\n<li>Create a WebWorker when the application loads in the browser</li>\n<li>Wire up a start message that is sent when the play button is pressed</li>\n<li>Upon receiving the start message your WebWorker should send messages on a steady beat</li>\n<li>When the stop button is pressed you should stop the regular “tick” messages coming from the WebWorker</li>\n<li>You should also terminate the WebWorker when the page unloads</li>\n</ul>\n<h2>Knowledge test</h2>\n<p>\n<section id=\"W3FdIFdoaWNoIG1ldGhvZCBkbyB5b3UgY2FsbCBvbiBhbiBpbnN0YW5jZSBvZiBhIFdlYldvcmtlciB0byBwYXNzIGEgbWVzc2FnZSBmcm9tIHRoZSBtYWluIHRocmVhZCB0byB0aGUgd29ya2VyIHRocmVhZD8=\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">Which method do you call on an instance of a WebWorker to pass a message from the main thread to the worker thread?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyBdIHdvcmtlci5zZW5kKG1zZyk=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBtZXRob2QgZG8geW91IGNhbGwgb24gYW4gaW5zdGFuY2Ugb2YgYSBXZWJXb3JrZXIgdG8gcGFzcyBhIG1lc3NhZ2UgZnJvbSB0aGUgbWFpbiB0aHJlYWQgdG8gdGhlIHdvcmtlciB0aHJlYWQ/JywgJ1sgXSB3b3JrZXIuc2VuZChtc2cpJywgJ1sjXSB3b3JrZXIucG9zdE1lc3NhZ2UobXNnKSddfQ==')\">worker.send(msg)</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIHdvcmtlci5wb3N0KG1zZyk=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBtZXRob2QgZG8geW91IGNhbGwgb24gYW4gaW5zdGFuY2Ugb2YgYSBXZWJXb3JrZXIgdG8gcGFzcyBhIG1lc3NhZ2UgZnJvbSB0aGUgbWFpbiB0aHJlYWQgdG8gdGhlIHdvcmtlciB0aHJlYWQ/JywgJ1sgXSB3b3JrZXIucG9zdChtc2cpJywgJ1sjXSB3b3JrZXIucG9zdE1lc3NhZ2UobXNnKSddfQ==')\">worker.post(msg)</article><article class=\"scorm-quiz-answer noselect\" id=\"WyNdIHdvcmtlci5wb3N0TWVzc2FnZShtc2cp\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBtZXRob2QgZG8geW91IGNhbGwgb24gYW4gaW5zdGFuY2Ugb2YgYSBXZWJXb3JrZXIgdG8gcGFzcyBhIG1lc3NhZ2UgZnJvbSB0aGUgbWFpbiB0aHJlYWQgdG8gdGhlIHdvcmtlciB0aHJlYWQ/JywgJ1sjXSB3b3JrZXIucG9zdE1lc3NhZ2UobXNnKScsICdbI10gd29ya2VyLnBvc3RNZXNzYWdlKG1zZyknXX0=')\">worker.postMessage(msg)</article>\n            </section></p>\n<p>\n<section id=\"W3FdIFdoaWNoIG9uZSBvZiB0aGVzZSBpcyBOT1QgYSBsaW1pdGF0aW9uIG9mIGEgV2ViV29ya2VyPw==\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">Which one of these is NOT a limitation of a WebWorker?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyBdIFlvdSBjYW5ub3QgbG9hZCBpbWFnZXM=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBvbmUgb2YgdGhlc2UgaXMgTk9UIGEgbGltaXRhdGlvbiBvZiBhIFdlYldvcmtlcj8nLCAnWyBdIFlvdSBjYW5ub3QgbG9hZCBpbWFnZXMnLCAnWyNdIFlvdSBjYW5ub3QgY29ubmVjdCB0byBhIFdlYlNvY2tldCddfQ==')\">You cannot load images</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIFlvdSBjYW5ub3QgYWNjZXNzIHRoZSBET00=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBvbmUgb2YgdGhlc2UgaXMgTk9UIGEgbGltaXRhdGlvbiBvZiBhIFdlYldvcmtlcj8nLCAnWyBdIFlvdSBjYW5ub3QgYWNjZXNzIHRoZSBET00nLCAnWyNdIFlvdSBjYW5ub3QgY29ubmVjdCB0byBhIFdlYlNvY2tldCddfQ==')\">You cannot access the DOM</article><article class=\"scorm-quiz-answer noselect\" id=\"WyNdIFlvdSBjYW5ub3QgY29ubmVjdCB0byBhIFdlYlNvY2tldA==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBvbmUgb2YgdGhlc2UgaXMgTk9UIGEgbGltaXRhdGlvbiBvZiBhIFdlYldvcmtlcj8nLCAnWyNdIFlvdSBjYW5ub3QgY29ubmVjdCB0byBhIFdlYlNvY2tldCcsICdbI10gWW91IGNhbm5vdCBjb25uZWN0IHRvIGEgV2ViU29ja2V0J119')\">You cannot connect to a WebSocket</article>\n            </section></p>\n<h2>Moving the bar</h2>\n<ul>\n<li><em>1.3 Apply styling to HTML elements programmatically Change the location of an element; apply a transform; show and hide elements</em></li>\n</ul>\n<p>Use this beating heart to move the bar across the grid. Something like this.</p>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/71742206-e1e36f80-2e58-11ea-84da-70b028c93d5a.gif\" alt=\"bar looping\"></p>\n<p>We have a Note class in our app. All these notes that we have really need organising. We want to be able to “play” whats on the grid and “record” our track. There is enough functionality needed for us to create a Grid class that will organise and keep track of the bars, and beats.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Grid</span> </span>{\n\t<span class=\"hljs-keyword\">constructor</span>() {\n\t  <span class=\"hljs-keyword\">this</span>.worker = <span class=\"hljs-keyword\">new</span> Worker(<span class=\"hljs-string\">\"/worker.js\"</span>)\n\t  <span class=\"hljs-keyword\">this</span>.bar = <span class=\"hljs-number\">0</span>\n\t  <span class=\"hljs-keyword\">this</span>.grid = [\n\t    [<span class=\"hljs-number\">1047.0</span>, <span class=\"hljs-number\">1175</span>, <span class=\"hljs-number\">1319</span>, <span class=\"hljs-number\">1397</span>, <span class=\"hljs-number\">1480</span>, <span class=\"hljs-number\">1568</span>, <span class=\"hljs-number\">1760</span>, <span class=\"hljs-number\">1976</span>],\n\t    [<span class=\"hljs-number\">523.3</span>, <span class=\"hljs-number\">587.3</span>, <span class=\"hljs-number\">659.3</span>, <span class=\"hljs-number\">698.5</span>, <span class=\"hljs-number\">740</span>, <span class=\"hljs-number\">784</span>, <span class=\"hljs-number\">880</span>, <span class=\"hljs-number\">987.8</span>],\n\t    [<span class=\"hljs-number\">261.6</span>, <span class=\"hljs-number\">293.7</span>, <span class=\"hljs-number\">329.6</span>, <span class=\"hljs-number\">349.2</span>, <span class=\"hljs-number\">370</span>, <span class=\"hljs-number\">392</span>, <span class=\"hljs-number\">440</span>, <span class=\"hljs-number\">493.9</span>],\n\t    [<span class=\"hljs-number\">130.8</span>, <span class=\"hljs-number\">146.8</span>, <span class=\"hljs-number\">164.8</span>, <span class=\"hljs-number\">174.6</span>, <span class=\"hljs-number\">185</span>, <span class=\"hljs-number\">196</span>, <span class=\"hljs-number\">220</span>, <span class=\"hljs-number\">246.9</span>]\n\t\t].map(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.map(<span class=\"hljs-function\"><span class=\"hljs-params\">freq</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> Note(freq)))\n\t\t<span class=\"hljs-keyword\">this</span>.worker.onmessage = <span class=\"hljs-keyword\">this</span>._tick.bind(<span class=\"hljs-keyword\">this</span>)\n\t}\n\tplay() {\n\t  <span class=\"hljs-keyword\">this</span>.worker.postMessage(<span class=\"hljs-string\">\"start\"</span>)\n\t}\n\tstop() {\n\t  <span class=\"hljs-keyword\">this</span>.worker.postMessage(<span class=\"hljs-string\">\"stop\"</span>)\n\t  <span class=\"hljs-keyword\">this</span>.grid.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">note</span> =&gt;</span> {\n\t\tnote.selected = <span class=\"hljs-literal\">false</span>\n\t\tnote.renderSelected()\n\t  }))\n\t  <span class=\"hljs-keyword\">this</span>.bar = <span class=\"hljs-number\">0</span>\n\t}\n\t_tick() {\n\t  <span class=\"hljs-keyword\">this</span>._play()\n\t  <span class=\"hljs-keyword\">this</span>.bar = <span class=\"hljs-keyword\">this</span>.bar === <span class=\"hljs-number\">7</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-keyword\">this</span>.bar + <span class=\"hljs-number\">1</span>\n\t}\n}\n</code></pre>\n<p>Now we have some updates to make to our Notes class (but we will come back to that). Lets go through this class. In the constructor function we set up some state, the worker, the bar and the grid.</p>\n<p>Can you see how we set up the web worker? The grid starts off as a multi-dimensional array. Then we map over it returning an array of arrays of notes set to a particular frequency.</p>\n<p>Finally we set an event listener on the worker that will call <code>this._tick</code> when it receives messages. Notice we are doing the same thing as we did earlier, using bind to bind the context of the class to <code>this._tick</code>.</p>\n<p><code>this.play</code> sends a “start” message to the web worker, <code>this.stop</code> sends a “stop” message to the worker, but also re-sets the bar and grid. <code>this._tick</code> is called whenever we receive a message from the worker, and it increments the bar, and calls a function that we have not created yet called <code>this._play</code>. We will come back to that.</p>\n<h3>Worker</h3>\n<p>The web worker just sends messages at regular intervals.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> interval;\nonmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">msg</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(msg.data === <span class=\"hljs-string\">\"start\"</span>) {\n        interval = setInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            postMessage(<span class=\"hljs-string\">\"tick\"</span>)\n        }, <span class=\"hljs-number\">300</span>)\n    }\n    <span class=\"hljs-keyword\">if</span>(msg.data === <span class=\"hljs-string\">\"stop\"</span>) {\n        clearInterval(interval)\n    }\n}\n</code></pre>\n<p>In this file the meaning of <code>this</code> is the web worker itself. So when we reference <code>onmessage</code> and <code>postMessage</code> javascript looks in the local scope for definitions of these methods. They are not in the local scope, so javascript goes up one level to the parent scope (the worker) and finds that these methods are defined in that scope. <code>clearInterval</code> is defined in the global scope (the window object).</p>\n<p>We could also write the same method like this:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> interval;\n<span class=\"hljs-keyword\">this</span>.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">msg</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(msg.data === <span class=\"hljs-string\">\"start\"</span>) {\n        interval = setInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">this</span>.postMessage(<span class=\"hljs-string\">\"tick\"</span>)\n        }, <span class=\"hljs-number\">300</span>)\n    }\n    <span class=\"hljs-keyword\">if</span>(msg.data === <span class=\"hljs-string\">\"stop\"</span>) {\n        clearInterval(interval)\n    }\n}\n</code></pre>\n<p>Now we have a beat. Can you console log out the bar progressing from 0 - 7?</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> grid = <span class=\"hljs-keyword\">new</span> Grid()\n</code></pre>\n<p>Add the call to <code>new Grid()</code> to your javascript file and see if you can start and stop a regular beat coming into your app from the web worker. You will have to wire up your control buttons to call <code>grid.start</code> on click:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"grid.start()\"</span>&gt;</span>Start<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<h3>Note UI</h3>\n<p>We need to update our <code>Note</code> class to have a method we can call that will temporary give the note a highlight when the bar is being played. Add the following to your <code>Note</code> class:</p>\n<pre><code class=\"hljs language-javascript\">highlight() {\n    <span class=\"hljs-keyword\">this</span>.el.addClass(<span class=\"hljs-string\">\"highlight\"</span>)\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">this</span>.el.removeClass(<span class=\"hljs-string\">\"highlight\"</span>)\n    }, <span class=\"hljs-number\">300</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>\n}\n</code></pre>\n<h3><code>Grid._play()</code></h3>\n<p>We need to create that <code>_play()</code> method mentioned earlier and add it to the <code>Grid</code> class.</p>\n<pre><code class=\"hljs language-javascript\">_play() {\n    <span class=\"hljs-keyword\">this</span>.grid\n        .map(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row[<span class=\"hljs-keyword\">this</span>.bar])\n        .flat()\n        .map(<span class=\"hljs-function\"><span class=\"hljs-params\">note</span> =&gt;</span> note.highlight())\n}\n</code></pre>\n<p>In the <code>_play</code> method above we map over the rows that form the grid and return only the note that corresponds to the current bar. That leaves us with a structure that would look something like this:</p>\n<pre><code class=\"hljs language-javascript\">[\n  [Note],\n  [Note],\n  [Note],\n  [Note]\n]\n</code></pre>\n<p>Calling <code>.flat()</code> on this structure will remove the nesting and flatten the array to this:</p>\n<pre><code class=\"hljs language-javascript\">[Note, Note, Note, Note]\n</code></pre>\n<p>Next we map over each Note instance and call <code>note.highlight()</code> on each one. Why do you think it is important to return <code>this</code> from the <code>.highlight</code> method?</p>\n","<h1>WebAudio API and Inheritance</h1>\n<ul>\n<li><em>1.5 Establish the scope of objects and variables Define the lifetime of variables; keep objects out of the global namespace; use the “this” keyword to reference an object that fired an event; scope variables locally and globally</em></li>\n</ul>\n<p>We have frequencies. Now it is time to use them. Each instance of a Note has its own frequency. We can use the browser’s built in Web Audio API to play those frequencies.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vS1_P6OsA3IvG1e846cusmYDqydZ7GTiI0uMwAWsP6RPwFoX8V3y45jzOsa4JvG6APcn0NJnZKkXq4N/embed?start=false&loop=true&delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>One important thing to know about the Web Audio API is that before initialising the <code>AudioContext</code> and playing a frequency, there must be an interaction by the user, either a gesture or a click event. This is to prevent the Web Audio API starting on page load and starting to emit sound that the user has no control over.</p>\n<p>We also want only 1 instance of the <code>AudioContext</code> on our page but many instances of oscillators at different frequencies. Lets solve this using inheritance.</p>\n<h2>Playing notes</h2>\n<p>Here is how to play a simple note (you can paste this into your browsers console to hear it).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-keyword\">new</span> AudioContext()\n<span class=\"hljs-keyword\">const</span> o = context.createOscillator()\no.frequency.value = <span class=\"hljs-number\">4400</span>\no.connect(context.destination)\no.start()\no.stop(context.currentTime + <span class=\"hljs-number\">1</span>)\n</code></pre>\n<p>You can think of a note as an object. We’ll want to create lots of notes in our programme, they will all be similar, but might have different frequencies and start at different times. This is a good candidate for using classes.</p>\n<p>Each note will rely on the audio context. We only need <u>one</u> of these, all the notes we create will originate from and be connected to this context. The frequency of an individual note only need to exist in the scope of an instance of a note.</p>\n<p>What we need is a singular context object, and then note objects that inherit access to that audio context. We want to end up making new notes like this:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">new</span> Note(<span class=\"hljs-number\">4400</span>)\n</code></pre>\n<p>The Note class needs to have access to the audio context. But we also want to have the audio context kept out of global scope. It is best practice to keep variables out of global scope. In global scope variables can be read by any part of your program, and variables can be reassigned by any code in the program.</p>\n<p>Another issue is you can only create a new AudioContext after a user has interacted with the page. You’ll see errors in the console if you try to do this. Because of this lets define our base class MyAppAudio like this:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyAppAudio</span> </span>{\n  <span class=\"hljs-keyword\">static</span> context = <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">static</span> setContext = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">this</span>.context = <span class=\"hljs-keyword\">new</span> AudioContext()\n  }\n}\n</code></pre>\n<p>The static keyword creates a class property and a class function. It means we can access them without creating an instance with the <strong>new</strong> keyword. This keeps the AudioContext out of global scope and contains it in a class. We can then extend this class with our Note class and then access the context via inheritance.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Note</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">MyAppAudio</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(freq) {\n    <span class=\"hljs-keyword\">super</span>()\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.constructor.context) <span class=\"hljs-keyword\">this</span>.constructor.setContext()\n    <span class=\"hljs-keyword\">const</span> o = <span class=\"hljs-keyword\">this</span>.constructor.context.createOscillator()\n    o.frequency.value = freq\n    o.connect(<span class=\"hljs-keyword\">this</span>.constructor.context.destination)\n    o.start()\n    o.stop(<span class=\"hljs-keyword\">this</span>.constructor.context.currentTime + <span class=\"hljs-number\">1</span>)\n  }\n}\n</code></pre>\n<p>Notice the call <code>super()</code>? We need that in out constructor when we are inheriting from classes. Can you also spot how we reference the inherited <code>context</code> property? Then we need a little guard clause before we create a note to initialise the <code>new AudioContext</code> if it is the first interaction.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTpt_GcwPW3lISEoKCt0fDUykw0MShTJH-dbL7BI_4NcM6nsuS0YzgVdbtK-gE6PSK5-1OODOgZJY75/embed?start=false&amp;loop=true&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>in the example above we used the <strong>class</strong> keyword. This is just syntactic sugar for the javascript prototypal inheritance that is going on behind the scenes. Have a look through the example below that does the same thing only this time using the prototype property.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">AppAudio</span> (<span class=\"hljs-params\"></span>) </span>{}\nAppAudio.prototype.context = <span class=\"hljs-literal\">undefined</span>\nAppAudio.prototype.setContext = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\t<span class=\"hljs-keyword\">this</span>.context = <span class=\"hljs-keyword\">new</span> AudioContext()\n}\n\n<span class=\"hljs-keyword\">const</span> Note = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">freq</span>) </span>{\n\t<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.constructor.context) <span class=\"hljs-keyword\">this</span>.constructor.setContext()\n\t<span class=\"hljs-keyword\">const</span> o = <span class=\"hljs-keyword\">this</span>.constructor.context.createOscillator()\n\to.frequency.value = freq\n\to.connect(<span class=\"hljs-keyword\">this</span>.constructor.context.destination)\n\to.start()\n\to.stop(<span class=\"hljs-keyword\">this</span>.constructor.context.currentTime + <span class=\"hljs-number\">1</span>)\n}\nNote.prototype = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-keyword\">new</span> AppAudio())\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">play</span> (<span class=\"hljs-params\">freq</span>) </span>{\n\t<span class=\"hljs-keyword\">new</span> Note(freq)\n}\n</code></pre>\n<p>Considering the above can you update your Note class to inherit from a Base class called <code>MyAppAudio</code>?</p>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/87775791-930e8d80-c81e-11ea-8b28-52faf685311d.png\" alt=\"UML diagram\"></p>\n","<h1>Serialise Data</h1>\n<p>Wow, you can really dance! Now we want to be able to save our tracks! We should keep all the bars and the notes that are played (or not) and then give the user the option to save a track when they stop.</p>\n<p><img src=\"https://media1.tenor.com/images/32c5067a73959d69217cfb91a151fc65/tenor.gif\" alt=\"dance gif\"></p>\n<p>There are a few things we’ll need to do in order to save our track.</p>\n<ol>\n<li>Keep a record of all bars, and the notes that have to be played in that bar</li>\n<li>Name the track</li>\n<li>Serialise our data into a data structure that we can persist in localStorage i.e. a stringified JSON object of key value pairs</li>\n</ol>\n<p>This is going to require us to</p>\n<ul>\n<li><em>3.1 Validate user input by using HTML5 elements Choose the appropriate controls based on requirements; implement HTML input types and content attributes (for example, required) to collect user input</em></li>\n<li><em>3.2 Validate user input by using JavaScript Evaluate a regular expression to validate the input format; validate that you are getting the right kind of data type by using built-in functions; prevent code injection</em></li>\n<li><em>3.4 Serialise, de-serialise, and transmit data Binary data; text data (JSON, XML); implement the jQuery serialise method; Form.Submit; parse data; sanitise input by using URI/form encoding</em></li>\n</ul>\n<p>First of all we should change our play button to a record button. When we press record we should start to save the audio data (bars &amp; notes) when we stop recording we can prompt the user to give the track a title, and save this track title along with the track audio data, or to cancel and dismiss saving the track.</p>\n<ol>\n<li>Update your play button to a record button</li>\n<li>Update the Grid class to have a property called <code>track</code> that will be an empty array into which we can push the bars as they are played.</li>\n<li>As bars are played by the <code>_play</code> method push them into the track array.</li>\n<li>On stop, the user should be presented with the option to save the track by giving it a name, or to cancel and not save that track. i.e. pop up a modal with a form?</li>\n<li>The track name should not contain any special characters that might enable script injection on our page. That means no html, javascript i.e <code>&lt;script&gt;</code> tags in our track name.</li>\n</ol>\n<h2>Form Validation</h2>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQPDtqqUC5Yluyx6bNjYS4F7QkY8dPW3mq1PBQJ7QZ-iz5p3S7ofGAiBIXzovbZpMhkNtjvxb-mlIu9/embed?start=false&amp;loop=true&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>Use the pattern attribute to validate your user’s input!</p>\n<h2>Regular Expressions</h2>\n<p>Regular Expressions (regex) are a means to match patterns in strings. They are very powerful and give our programmes the ability to ask questions like:</p>\n<blockquote>\n<p>is this pattern in this string?</p>\n</blockquote>\n<p>We can use regex to replace patterns in strings or remove them. When users give their tracks a title we want to make sure they are safe strings. This is partly for practice, but also we want our titles to be sent over websockets, stored in local storage, serialised, deserialised, and rendered in different browsers. It is important that our titles are robust and don’t contain doggy script tags for example.</p>\n<p>The easiest way to start with regex is to literally match strings.</p>\n<pre><code class=\"hljs\">/dog/\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/74018079-29e03f80-498d-11ea-84de-5476c747fd2e.png\" alt=\"\"></p>\n<p>In the example above the forward slashes indicate the beginning and end of the regex. We are then declaring the pattern “dog”. And we have a match. We could just match one letter “o”.</p>\n<pre><code class=\"hljs\">/o/\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/74018089-2d73c680-498d-11ea-8434-e681bea541a2.png\" alt=\"\"></p>\n<p>Which “o” was matched? To match all the “o” we need the <em><strong>global</strong></em> flag which we add like this:</p>\n<pre><code class=\"hljs\">/o/g\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/74018092-2f3d8a00-498d-11ea-95a8-577a22b931e2.png\" alt=\"\"></p>\n<p>Neat. Now lets get more fancy and match all the letters between “a” and “g” in the alphabet.</p>\n<pre><code class=\"hljs\">/[a-gA-G]/g\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/74018097-31074d80-498d-11ea-8005-abc6f6aa6bec.png\" alt=\"\"></p>\n<p>The square brackets indicate a character class, we are saying any of the characters between “a” and “g”. Usually you’ll see this [a-zA-Z] which matches any letter.</p>\n<p>We can match non characters like white space.</p>\n<pre><code class=\"hljs\">/\\s/g\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/74018098-3369a780-498d-11ea-9542-0bdba590f857.png\" alt=\"\"></p>\n<p>and then start to combine these rules to make more specific patterns. For example match the first word and space and the last word and space.</p>\n<pre><code class=\"hljs\">(^[a-zA-Z]+\\s)|(\\s[a-zA-Z]+$)\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/74021097-da9d0d80-4992-11ea-88ad-f64f400afe3a.png\" alt=\"\"></p>\n<p>Thats more advanced. In the brackets are capture groups, they are sub regex patterns (patterns within patterns) the “|” means <strong>OR</strong> the “+” plus means must match at least once, I think of it like saying <em>keep going until</em> “\\s” is a space. The “^” caret means the start of the string, whilst the “$” means the end. Below is a table of essential symbols.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">**Symbol**</th>\n<th style=\"text-align:left\">**Description**</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">The caret character denotes the beginning of a string</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:left\">The dollar sign denotes the end of a string</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">The period indicates to match on any character</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[A-Z]</td>\n<td style=\"text-align:left\">Alphabet letters indicate to match any alphabetic character. This is case-sensitive. To match lowercase letters, use [a-z]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:left\">This combination indicates to match any numeric character</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">The plus sign denotes that the preceding character or character set must match at least once</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">The asterisk denotes that the preceding character or character set might or might not match. This generates zero or more matches</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^]</td>\n<td style=\"text-align:left\">When included in a character set, the caret denotes a negation. [^a] would match a string that doesn’t have an ‘a’ in it</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">The question mark denotes that the preceding character is optional</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:left\">This combination indicates to match a word character consisting of any alphanumeric character, including an underscore</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:left\">The backslash is an escape character. If any special character should be included in the character set to match on literally, it needs to be escaped with a . For example, to find a backslash in a string, the pattern would include \\</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:left\">This combination indicates to match on a space. When it’s combined with + or *, it can match on one or more spaces</td>\n</tr>\n</tbody>\n</table>\n<p>We want a pattern that will replace any special characters or spaces with “_”. So if we have a track title like this:</p>\n<p><strong>Th3 thundern@ughts are Gø!</strong></p>\n<p>Our regex needs to target and replace the offending characters so we are left with this:</p>\n<p><strong>th3_thundern_ughts_are_G__</strong></p>\n<p>Can you figure out a regex to do that? You can use an online regex playground like <a href=\"https://regexr.com/\">RegExr</a>. This also has a cheatsheet to help you.</p>\n<h2>LocalStorage</h2>\n<p><strong>window.localStorage</strong> is a place in the browser where you can store values as key =&gt; value pairs. It will be scoped to that domain, so for example things you save to localStorage when you are on <strong><a href=\"https://www.amazon.co.uk\">https://www.amazon.co.uk</a></strong> will only be available in the browser when you are on pages served from that domain. The same is true for <strong><a href=\"http://localhost\">http://localhost</a></strong>.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vT4wCJjWXLsTFfoX-0JzvXu4bNZa-wDE2QfXAn5cOrYhchUekDfDw52QSR_FSfHSeAzCD7aQbokFW4t/embed?start=false&amp;loop=true&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>The localStorage API is very simple:</p>\n<pre><code class=\"hljs\">// save an item\nlocalStorage.setItem('score', 9)\n// get an item\nlocalStorage.getItem('score') // returns 9\n// remove an item\nlocalStorage.removeItem('score') // returns &quot;true&quot;\n// blow the lot away\nlocalStorage.clear()\n</code></pre>\n<p>We’ll need to serialise our data to store all the track information in a string. To be compatible and play each others tracks we need a common standard or agreed format. Below is the spec for a single “Track” object. This should be serialised and saved in localStorage with a key i.e. <code>localStorage.setItem('tracks', tracks)</code> where tracks is a serialised array of track objects like this.</p>\n<pre><code class=\"hljs language-json\">    [\n        {\n            <span class=\"hljs-attr\">\"trackname\"</span>: <span class=\"hljs-string\">\"example-track-name\"</span>,\n            <span class=\"hljs-attr\">\"data\"</span>: [\n                [<span class=\"hljs-number\">440</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">580</span>, <span class=\"hljs-number\">332</span>],\n                [<span class=\"hljs-number\">220</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">709</span>],\n                [<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">709</span>],\n                [<span class=\"hljs-number\">560</span>, <span class=\"hljs-number\">364</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>]\n            ],\n            <span class=\"hljs-attr\">\"city\"</span>: <span class=\"hljs-string\">\"London\"</span>,\n            <span class=\"hljs-attr\">\"countryCode\"</span>: <span class=\"hljs-string\">\"gb\"</span>\n        }\n    ]\n</code></pre>\n<p>You can show and hide elements in the DOM using jQuery like this.</p>\n<pre><code class=\"hljs language-javascript\">$(<span class=\"hljs-string\">\"#modal\"</span>).show()\n$(<span class=\"hljs-string\">\"#modal\"</span>).hide()\n</code></pre>\n","<h1>Sharing tracks over WebSockets</h1>\n<ul>\n<li><em>2.4 Implement a callback Receive messages from the HTML5 WebSocket API</em></li>\n</ul>\n<p>You have tracks saved in localStorage. Let’s make them available so everyone else can enjoy them. We are going to use WebSockets to connect to a relay server that we can send our tracks to and have them broadcasted to everyone connected.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRcUuangOTH4PvIyU9V409kMkt2SOKOlJ3QZ1ywh8MO8ZJceAG7xohX7H5L7k41tHSpqPTmpoig8UrP/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<p>You should connect to this web socket endpoint when your app loads:</p>\n<pre><code class=\"hljs language-javascript\">    <span class=\"hljs-keyword\">const</span> ws = <span class=\"hljs-keyword\">new</span> WebSocket(<span class=\"hljs-string\">'ws://fathomless-reaches-81353.herokuapp.com/socket'</span>)\n</code></pre>\n<p>You can visit <a href=\"http://fathomless-reaches-81353.herokuapp.com/\">http://fathomless-reaches-81353.herokuapp.com/</a> for instructions about how to use this relay service. It basically works something like this.</p>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/71779386-1fa5dc80-2fae-11ea-8c0c-aa179892c729.png\" alt=\"illustration of the web socket relay server\"></p>\n<p>Once you have a websocket instance you can add event listeners to it like this:</p>\n<pre><code class=\"hljs language-javascript\">    ws.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">msg</span>) </span>{\n        msg.data <span class=\"hljs-comment\">// payload from the server</span>\n    }\n    ws.onclose = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// do something when the socket connection closes</span>\n    }\n</code></pre>\n<p>Each peer stores their tracks in localStorage.</p>\n<pre><code class=\"hljs language-javascript\">_save(track) {\n    <span class=\"hljs-keyword\">let</span> tracks = <span class=\"hljs-built_in\">JSON</span>.parse(localStorage.getItem(<span class=\"hljs-string\">\"tracks\"</span>) || <span class=\"hljs-string\">\"[]\"</span>)\n    localStorage.setItem(<span class=\"hljs-string\">\"tracks\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify([...tracks, track]))\n}\n</code></pre>\n<p>When you save tracks you have to read them out of localStorage, deserialise them, then append your new track. Then do the reverse and serialise the tracks and re-writing the updated data in localStorage.</p>\n<p>Upon connection peers receive a <code>msg.data</code> that equals “collect”, you should then send your tracks from localStorage to the socket server. The socket server then broadcasts those tracks to all the connected peers (including you). Anything that is not a “collect” msg is going to be an array of serialised tracks.</p>\n<p>No tracks are stored on a central server, the socket server is “stateless”, tracks are distributed among the connected peers. Update your code to render tracks from the incoming messages from your WebSocket NOT from localStorage!</p>\n<p>You can use the spread operator to append items to an array. It’s similar to the way the spread operator works with objects:</p>\n<pre><code class=\"hljs language-javascript\">    <span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">const</span> b = [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]\n    <span class=\"hljs-keyword\">const</span> c = [...a, ...b]\n    c <span class=\"hljs-comment\">// [1,2,3,4,5,6]</span>\n</code></pre>\n<p>There is enough going on here to warrant an object in our programme that deals with tracks. Let us add a <code>Tracks</code> class that will encapsulate the logic and state of all our tracks.</p>\n","<h1>Tracks</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Create a <code>Tracks</code> class by following the UML diagram on the right.<br/><br/>Assign a web socket connection to <code>ws</code> property. <code>tracks</code> is going to be your local state of tracks received via the web socket. Remember to register an <code>onmessage</code> handler in the constructor function that listens for “collect” or an updated list of tracks. <code>save(track)</code> should take a track instance and save it to <code>localStorage</code>. <code>_send()</code> can be called on “collect” to send all the tracks from your <code>localStorage</code>, and when a new track is saved you can call <code>_send()</code> so everyone sees your new track. <code>_render()</code> this should empty your parent HTML element that will hold the list of tracks, and then create the HTML for each track (including an onclick event to load the track into a <code>Player</code>) then add it into the DOM</td>\n<td style=\"text-align:left\"><img src=\"https://user-images.githubusercontent.com/4499581/87775782-90139d00-c81e-11ea-93e2-169f23427e9b.png\" alt=\"UML Track class\"></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/89508534-f3617100-d7c5-11ea-9301-316ed45acd3b.png\" alt=\"example of tracks rendered in the DOM\"></p>\n<p>Above is an example of the tracks rendered in an <code>&lt;aside&gt;</code> element next to the composing grid interface.</p>\n<h2>onclick</h2>\n<p>In the next section we are going to build out the <code>Player</code> component. In preparation for this we should have our track call the following function when it is clicked:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"player.load('${btoa(JSON.stringify(track))}')\"</span>&gt;</span>${track.trackname}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<p>Earlier we looked at serialising data. Here we are using a a function called <code>btoa()</code> which is part of the browser’s javascript API. It will base64 encode our track. We have to do this as just stringifying our track and including it inline as an argument to a javascript function, is not enough to escape all the quotes and other punctuation.</p>\n<p>We are going to turn this:</p>\n<p>{“trackname”:“rain down”,“data”:[[1047,523.3,261.6,130.8],[1175,587.3,293.7,146.8],[1319,659.3,329.6,164.8],[1397,698.5,349.2,174.6],[1480,740,370,185],[1568,784,392,196],[1760,880,440,220],[1976,987.8,493.9,246.9],[1047,523.3,261.6,130.8],[1175,587.3,293.7,146.8],[1319,659.3,329.6,164.8],[1397,698.5,349.2,174.6],[1480,740,370,185],[1568,784,392,196],[1760,880,440,220],[1976,987.8,493.9,246.9],[1047,523.3,261.6,130.8],[1175,587.3,293.7,146.8],[1319,659.3,329.6,164.8],[1397,698.5,349.2,174.6],[1480,740,370,185],[1568,784,392,196],[1760,880,440,220],[1976,987.8,493.9,246.9],[1047,523.3,261.6,130.8],[1175,587.3,293.7,146.8],[1319,659.3,329.6,164.8],[1397,698.5,349.2,174.6],[1480,740,370,185],[1568,784,392,196],[1760,880,440,220],[1976,987.8,493.9,246.9],[1047,523.3,261.6,130.8],[1175,587.3,293.7,146.8],[1319,659.3,329.6,164.8]],“city”:&quot;&quot;,“countryCode”:&quot;&quot;}</p>\n<p>Into this:</p>\n<div style=\"word-wrap:break-word;max-width:100%;\">eyJ0cmFja25hbWUiOiJyYWluIGRvd24iLCJkYXRhIjpbWzEwNDcsNTIzLjMsMjYxLjYsMTMwLjhdLFsxMTc1LDU4Ny4zLDI5My43LDE0Ni44XSxbMTMxOSw2NTkuMywzMjkuNiwxNjQuOF0sWzEzOTcsNjk4LjUsMzQ5LjIsMTc0LjZdLFsxNDgwLDc0MCwzNzAsMTg1XSxbMTU2OCw3ODQsMzkyLDE5Nl0sWzE3NjAsODgwLDQ0MCwyMjBdLFsxOTc2LDk4Ny44LDQ5My45LDI0Ni45XSxbMTA0Nyw1MjMuMywyNjEuNiwxMzAuOF0sWzExNzUsNTg3LjMsMjkzLjcsMTQ2LjhdLFsxMzE5LDY1OS4zLDMyOS42LDE2NC44XSxbMTM5Nyw2OTguNSwzNDkuMiwxNzQuNl0sWzE0ODAsNzQwLDM3MCwxODVdLFsxNTY4LDc4NCwzOTIsMTk2XSxbMTc2MCw4ODAsNDQwLDIyMF0sWzE5NzYsOTg3LjgsNDkzLjksMjQ2LjldLFsxMDQ3LDUyMy4zLDI2MS42LDEzMC44XSxbMTE3NSw1ODcuMywyOTMuNywxNDYuOF0sWzEzMTksNjU5LjMsMzI5LjYsMTY0LjhdLFsxMzk3LDY5OC41LDM0OS4yLDE3NC42XSxbMTQ4MCw3NDAsMzcwLDE4NV0sWzE1NjgsNzg0LDM5MiwxOTZdLFsxNzYwLDg4MCw0NDAsMjIwXSxbMTk3Niw5ODcuOCw0OTMuOSwyNDYuOV0sWzEwNDcsNTIzLjMsMjYxLjYsMTMwLjhdLFsxMTc1LDU4Ny4zLDI5My43LDE0Ni44XSxbMTMxOSw2NTkuMywzMjkuNiwxNjQuOF0sWzEzOTcsNjk4LjUsMzQ5LjIsMTc0LjZdLFsxNDgwLDc0MCwzNzAsMTg1XSxbMTU2OCw3ODQsMzkyLDE5Nl0sWzE3NjAsODgwLDQ0MCwyMjBdLFsxOTc2LDk4Ny44LDQ5My45LDI0Ni45XSxbMTA0Nyw1MjMuMywyNjEuNiwxMzAuOF0sWzExNzUsNTg3LjMsMjkzLjcsMTQ2LjhdLFsxMzE5LDY1OS4zLDMyOS42LDE2NC44XV0sImNpdHkiOiIiLCJjb3VudHJ5Q29kZSI6IiJ9</div>\n<p>Our <code>load(track)</code> function in our <code>Player</code> will be passed this encoded string which it will then decode and load into the player.</p>\n","<h1>Player</h1>\n<p>We are going to make a player to play and visualise our tracks. For times when we want to render graphics or draw to the DOM there is the <code>&lt;canvas&gt;</code> element. This is going to be at the heart of our <code>Player</code> component.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Description</th>\n<th style=\"text-align:left\">UML</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">The <code>Player</code> class should have an instance of the <code>Worker</code> like the <code>Grid</code> does, because the <code>Player</code> will need to play a track so we will want a <code>_tick()</code> function to consume and play the bars of the track.<br/><br/>We want somewhere to store the track that the player is going to play. Then add functions to <code>load(track)</code>, <code>play()</code>, &amp; <code>stop()</code> a track.<br/><br/>The <code>_render()</code> function should return the HTML that will make up our player interface.</td>\n<td style=\"text-align:left\"><img src=\"https://user-images.githubusercontent.com/4499581/89511951-71277b80-d7ca-11ea-9abb-cb58c683548c.png\" alt=\"UML Player class\"></td>\n</tr>\n</tbody>\n</table>\n<h2><code>atob()</code></h2>\n<p>Previously we constructed our tracks so when they were are clicked they will call:</p>\n<pre><code class=\"hljs language-javascript\">onclick=<span class=\"hljs-string\">\"player.load('${btoa(JSON.stringify(track))}')\"</span>\n</code></pre>\n<p>To decode the string that <code>load(track)</code> will receive we need to call the decode version of <code>btoa()</code> which is <code>atob()</code> that will take a base64 encoded string and return you a JSON stringified track. You can then hide the grid, show the player, add the <code>JSON.parse</code> version of the track into the <code>Player</code>'s track property and then call <code>_render()</code>.</p>\n<h1>👩🏾‍💻🧑🏽‍💻👨🏻‍💻</h1>\n<p>Create a <code>Player</code> class using the UML diagram above as a guide. When a user clicks on a track it should hide the grid and display the player. The player should have the track that was clicked loaded into the <code>track</code> property.</p>\n<h2><code>play()</code></h2>\n<p>The track is in the <code>Player</code> can you play it? Use the worker to get a ‘tick’. Then play the bars in the loaded track.</p>\n<h1>Visualising the Track</h1>\n<p>We will be able to hook into the audio data by inserting an “Analyser” node into our audio graph. That will give us a stream of audio data that we can use to draw on the canvas element.</p>\n<p>Before we look at that let first of all try to draw some simple lines and shapes on the canvas.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vS2qKAx1X2_HWsPd0AdE5QN-jF0PgJGhjA_1n-rp09m34Zo8t4EE8j9JE2XjI2CGO-RVVSRsGjAL34w/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<h1>👩🏾‍💻🧑🏽‍💻👨🏻‍💻</h1>\n<pre><code class=\"hljs language-javascript\">_render() {\n    <span class=\"hljs-keyword\">const</span> playerElement = <span class=\"hljs-string\">`\n        &lt;article style=\"position:relative;\"&gt;\n            &lt;h2&gt;<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.track.trackname}</span>&lt;/h2&gt;\n            &lt;canvas&gt;&lt;/canvas&gt;\n            &lt;nav style=\"position:absolute:bottom:0;\"&gt;\n                &lt;button onclick=\"player.play()\"&gt;Play&lt;/button&gt;\n                &lt;button onclick=\"player.stop()\"&gt;Stop&lt;/button&gt;\n            &lt;/nav&gt;\n        &lt;/article&gt;\n    `</span>\n    $(<span class=\"hljs-string\">\"#player\"</span>).append(playerElement)\n    $(<span class=\"hljs-string\">'canvas'</span>).get(<span class=\"hljs-number\">0</span>).setAttribute(<span class=\"hljs-string\">'width'</span>, $(<span class=\"hljs-string\">\"#player\"</span>).width())\n    $(<span class=\"hljs-string\">'canvas'</span>).get(<span class=\"hljs-number\">0</span>).setAttribute(<span class=\"hljs-string\">'height'</span>, $(<span class=\"hljs-string\">\"#player\"</span>).height() - <span class=\"hljs-number\">130</span>)\n    <span class=\"hljs-keyword\">this</span>.canvas = {\n        <span class=\"hljs-attr\">ctx</span>: $(<span class=\"hljs-string\">'canvas'</span>).get(<span class=\"hljs-number\">0</span>).getContext(<span class=\"hljs-string\">'2d'</span>),\n        <span class=\"hljs-attr\">w</span>: $(<span class=\"hljs-string\">'canvas'</span>).width(),\n        <span class=\"hljs-attr\">h</span>: $(<span class=\"hljs-string\">'canvas'</span>).height()\n    }\n    <span class=\"hljs-keyword\">this</span>.canvas.ctx.fillStyle = <span class=\"hljs-string\">\"burlywood\"</span>\n}\n</code></pre>\n<p>Can you spot the canvas context interface? We call <code>getContext('2d')</code> to access an instance of the canvas context. It is calling commands on this interface that enable us to draw on our canvas. Given the <code>_render()</code> function above. Can you draw a series of bars on your canvas?</p>\n","<h1>Canvas &amp; Request Animation Frame</h1>\n<p><img src=\"https://user-images.githubusercontent.com/4499581/90388072-2be33380-e07f-11ea-98f5-1001f1c5182a.gif\" alt=\"track being visualised\"></p>\n<p>Above is the kind of thing we are aiming for. We need to extend 2 of our classes. We are going to add an analyser node to our audio graph when we play tracks using the MyAppAudio base class. We also need to add some code to animate the bars in the Player class.</p>\n<h2>Extend the MyAppAudio class</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">instructions</th>\n<th style=\"text-align:left\">UML</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Can you extend this class by adding two new static properties; analyser and audioData. All of these will be set when you call <code>MyAppAudio.setContext()</code> as the analyser is created from the AudioContext instance.</td>\n<td style=\"text-align:left\"><img src=\"https://user-images.githubusercontent.com/4499581/90389291-2f77ba00-e081-11ea-8e0a-7b912a62eb38.png\" alt=\"MyAppAudio UML diagram\"></td>\n</tr>\n</tbody>\n</table>\n<p>Adding an analyser node means when we connect our source (an oscillator) through this node, we will be able to access some of the audio data. That snapshot of data we are going to place in an Uint8Array - thats an array with a fixed size, which we can iterate over, and use those values to set the height of our bars as the audio plays.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyAppAudio</span> </span>{\n    <span class=\"hljs-keyword\">static</span> context = <span class=\"hljs-literal\">undefined</span>\n    <span class=\"hljs-keyword\">static</span> analyser = <span class=\"hljs-literal\">undefined</span>\n    <span class=\"hljs-keyword\">static</span> audioData = <span class=\"hljs-literal\">undefined</span>\n    <span class=\"hljs-keyword\">static</span> setContext = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">this</span>.context = <span class=\"hljs-keyword\">new</span> AudioContext()\n        <span class=\"hljs-keyword\">this</span>.analyser = <span class=\"hljs-keyword\">this</span>.context.createAnalyser()\n        <span class=\"hljs-keyword\">this</span>.audioData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(<span class=\"hljs-keyword\">this</span>.analyser.frequencyBinCount)\n    }\n}\n</code></pre>\n<p>Instances of the Note class need to know if they should pass through the analyser node or not. Can you think of a way to refactor the <code>Note.play()</code> method to conditionally pass through the analyser node if it is being played back by the Player?</p>\n<h2>Extend the Player class</h2>\n<p>How too animate? Think about a flick book.<br>\n<img src=\"https://images.squarespace-cdn.com/content/v1/5b1e8e5e12b13fe583922460/1528835374841-5QV6TRZ76LEK6GAU8DQQ/ke17ZwdGBToddI8pDm48kDwcMOkWjB-dh5UJuaCAkzJZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpx7gYYqsE3-d3T-rAujCsKB6Ebg7BE-3tI4Wg3H92DuXshSGXJoxzxQyr_LXYiHo9c/Meteor-anim-gif+2.gif?format=1500w\" alt=\"flick book\"><br>\nTo get the impression of movement you need to flick the pages pretty quickly. We need to do something similar. We can wipe our canvas clean and draw on it. If we do this fast enough, it will look like things are moving. How about 60 times a second?</p>\n<p>The browser API has a function we can call called <code>requestAnimationFrame</code>. If we call <code>requestAnimationFrame(this._draw.bind(this))</code> with a function, it will cause that function to be called with every paint of the browser (about 60 times a second). If you don’t call the function the animating will stop. We will have to use <code>.bind</code> to preserve our executing context. Below is a suggested <code>_draw()</code> function.</p>\n<pre><code class=\"hljs language-javascript\">_draw() {\n    <span class=\"hljs-keyword\">if</span> (!MyAppAudio.context) MyAppAudio.setContext()\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.isPlaying) requestAnimationFrame(<span class=\"hljs-keyword\">this</span>._draw.bind(<span class=\"hljs-keyword\">this</span>))\n    MyAppAudio.analyser.getByteFrequencyData(MyAppAudio.audioData)\n    <span class=\"hljs-keyword\">this</span>.canvas.ctx.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>.canvas.w, <span class=\"hljs-keyword\">this</span>.canvas.h)\n    <span class=\"hljs-keyword\">const</span> barWidth = <span class=\"hljs-number\">32</span>\n    \n    MyAppAudio.audioData.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, barHeight</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> y = barHeight / <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">this</span>.canvas.ctx.fillRect(x, <span class=\"hljs-keyword\">this</span>.canvas.h - y, barWidth, y)\n        <span class=\"hljs-keyword\">return</span> x + barWidth + <span class=\"hljs-number\">1</span>\n    }, <span class=\"hljs-number\">0</span>)\n}\n</code></pre>\n<p>Can you read this function?</p>\n<p>\n<section id=\"W3FdIHdoYXQgdmFyaWFibGUgaXMgYmVpbmcgdXNlZCB0byBzdG9wIHRoZSBhbmltYXRpb24/\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">what variable is being used to stop the animation?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyBdICghTXlBcHBBdWRpby5jb250ZXh0KQ==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSB3aGF0IHZhcmlhYmxlIGlzIGJlaW5nIHVzZWQgdG8gc3RvcCB0aGUgYW5pbWF0aW9uPycsICdbIF0gKCFNeUFwcEF1ZGlvLmNvbnRleHQpJywgJ1sjXSAodGhpcy5pc1BsYXlpbmcpJ119')\">(!MyAppAudio.context)</article><article class=\"scorm-quiz-answer noselect\" id=\"WyNdICh0aGlzLmlzUGxheWluZyk=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSB3aGF0IHZhcmlhYmxlIGlzIGJlaW5nIHVzZWQgdG8gc3RvcCB0aGUgYW5pbWF0aW9uPycsICdbI10gKHRoaXMuaXNQbGF5aW5nKScsICdbI10gKHRoaXMuaXNQbGF5aW5nKSddfQ==')\">(this.isPlaying)</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIHRoaXMuY2FudmFzLmN0eC5jbGVhclJlY3Q=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSB3aGF0IHZhcmlhYmxlIGlzIGJlaW5nIHVzZWQgdG8gc3RvcCB0aGUgYW5pbWF0aW9uPycsICdbIF0gdGhpcy5jYW52YXMuY3R4LmNsZWFyUmVjdCcsICdbI10gKHRoaXMuaXNQbGF5aW5nKSddfQ==')\">this.canvas.ctx.clearRect</article>\n            </section></p>\n<p>\n<section id=\"W3FdIFdoaWNoIGFycmF5IGZ1bmN0aW9uIGlzIHVzZWQgdG8gaXRlcmF0ZSBvdmVyIHRoZSBkYXRhPw==\" class=\"scorm-quiz\">\n                <article class=\"scorm-quiz-question noselect\">Which array function is used to iterate over the data?</article>\n                <article class=\"scorm-quiz-answer noselect\" id=\"WyNdIHJlZHVjZQ==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBhcnJheSBmdW5jdGlvbiBpcyB1c2VkIHRvIGl0ZXJhdGUgb3ZlciB0aGUgZGF0YT8nLCAnWyNdIHJlZHVjZScsICdbI10gcmVkdWNlJ119')\">reduce</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIGZvckVhY2g=\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBhcnJheSBmdW5jdGlvbiBpcyB1c2VkIHRvIGl0ZXJhdGUgb3ZlciB0aGUgZGF0YT8nLCAnWyBdIGZvckVhY2gnLCAnWyNdIHJlZHVjZSddfQ==')\">forEach</article><article class=\"scorm-quiz-answer noselect\" id=\"WyBdIG1hcA==\" onclick=\"onAnswer('KCkgPT4ge3JldHVybiBbJ1txXSBXaGljaCBhcnJheSBmdW5jdGlvbiBpcyB1c2VkIHRvIGl0ZXJhdGUgb3ZlciB0aGUgZGF0YT8nLCAnWyBdIG1hcCcsICdbI10gcmVkdWNlJ119')\">map</article>\n            </section></p>\n<p><code>MyAppAudio.analyser.getByteFrequencyData(MyAppAudio.audioData)</code> this fills the <code>MyAppAudio.audioData</code> array with values. We then wipe the canvas clean and then draw a series of bars across the canvas. How does the <code>x</code> value increase? What happens when you alter the <code>barWidth</code> variable?</p>\n","<h1>Geolocation</h1>\n<p>Our Audio app is so amazing we need to think about it being used in lots of different countries. When users create tracks it would be so cool to know which country they created the track in.</p>\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTjDs3Rv-Kup2MNhAGWb564oSe1P4n8jRFtC6j3hpaBHMCHShNsTz67pLgBzjkKHihd8ngnKGCsKj6M/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"444\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"geolocation\"</span> <span class=\"hljs-keyword\">in</span> navigator) {\n    navigator.geolocation.getCurrentPosition(<span class=\"hljs-function\"><span class=\"hljs-params\">position</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> {latitude, longitude} = position.coords\n        <span class=\"hljs-built_in\">console</span>.log({latitude, longitude})\n    }\n}\n</code></pre>\n<p>Useful, but latitude and longitude don’t mean much to us humans. What we’ll have to do is turn these coords into a human readable place name.</p>\n<p>For this we can turn to an API. Our Audio app can make a call out to the internet with those coords and get back in return a data object that will tell us which country the track was created in.</p>\n<h2>XMLHttpRequest</h2>\n<p>The browser has this capability built into it. You’ll find on the <code>window</code> object a constructor named <code>XMLHttpRequest</code>. Can you find it? Lets go through the steps to form an http request using this API.</p>\n<ol>\n<li>Create an instance of a request</li>\n<li>Add the function that will handle the response</li>\n<li>Open the URL</li>\n<li>Initiate the request</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest()\n</code></pre>\n<p>Now you can write the function to handle the response. What is somewhat unusual about XMLHttpRequest is the response data is accessible through the <code>this</code> context of the response handler.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> onGeoRequest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [addressparts] = <span class=\"hljs-keyword\">this</span>.responseXML.getElementsByTagName(<span class=\"hljs-string\">'addressparts'</span>)\n    <span class=\"hljs-keyword\">const</span> countryCode = addressparts.getElementsByTagName(<span class=\"hljs-string\">'country_code'</span>)[<span class=\"hljs-number\">0</span>].innerHTML\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'countryCode'</span>, countryCode)\n}\n</code></pre>\n<p>Can you see us accessing our data through <code>this</code> - the function does not receive an argument. Let us add our handler to the request.</p>\n<pre><code class=\"hljs language-javascript\">request.addEventListener(<span class=\"hljs-string\">'load'</span>, onGeoRequest)\n</code></pre>\n<p>Then we keep adding to the <code>request</code> instance we created by adding the URL we want to open. Then actually executing it.</p>\n<pre><code class=\"hljs language-javascript\">request.open(<span class=\"hljs-string\">\"GET\"</span>,<span class=\"hljs-string\">'https://eu1.locationiq.com/v1/reverse.php?key=YOUR_API_KEY&amp;lat=YOUR_LATITUDE&amp;lon=YOUR_LONGITUDE&amp;format=xml'</span>)\nrequest.send()\n</code></pre>\n<p>Now our request URL needs some explanation. We are using an on-line service <a href=\"https://eu1.locationiq.com/\">Locationiq</a> to reverse Geo-lookup. That means we start with lat and lng and end with a place name. The reverse of starting with a place name and ending up with a lat and lng.</p>\n<p>You’ll need to register and get yourself a free API key to make requests. The url is formed with 4 query parameters:</p>\n<ol>\n<li>key=“pk.22b24860e80eaf7b4fe6e1c481d89b97”</li>\n<li>lat=51.4850816</li>\n<li>lon=-0.1015808</li>\n<li>format=xml</li>\n</ol>\n<p>These are separated by the “&amp;” character. Can you put all this together so you end up with a <code>countryCode</code> for example <strong>GB</strong> or <strong>FR</strong>.</p>\n<p>With this country code you can have a little fun displaying a flag next to the track. Check out <a href=\"https://www.countryflags.io/\">Country Flags API</a> and get yourself a little flag like this:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.countryflags.io/:country_code/:style/:size.png\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.countryflags.io/fr/flat/32.png\"</span>&gt;</span>\n</code></pre>\n<p>Voilà ![French Flag (<a href=\"https://www.countryflags.io/fr/flat/32.png\">https://www.countryflags.io/fr/flat/32.png</a>)</p>\n","<h1>You are done (nearly)</h1>\n<p>Your app is now feature complete. However there is some refactoring to do.</p>\n<h2>Ajax with jQuery</h2>\n<p>You can refactor the some what clunky XMLHttpRequest and use jQuery and json in it’s place. Have a look at the <a href=\"https://api.jquery.com/jquery.ajax/\">documentation</a> and refactor your code.</p>\n<p>The AJAX call has a few important parameters that you can set. Look at the AJAX call below.</p>\n<pre><code class=\"hljs language-javascript\">$.ajax({\n  <span class=\"hljs-attr\">url</span>: searchPath,\n  <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">dataType</span>: <span class=\"hljs-string\">\"xml\"</span>,\n  <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n    $(data).find(<span class=\"hljs-string\">\"fruit\"</span>).each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      $(<span class=\"hljs-string\">'#searchResults'</span>).append($(<span class=\"hljs-keyword\">this</span>).text())\n      $(<span class=\"hljs-string\">'#searchResults'</span>).append(<span class=\"hljs-string\">\"&lt;BR/&gt;\"</span>)\n    })\n  }\n})\n</code></pre>\n<p>The first parameter being set is the url that the AJAX call will be requesting. For security reasons, to prevent cross site scripting, this URL must be within the same domain as the web-page itself.</p>\n<p>The next parameter, cache, is optional and indicates whether the call can use a cached copy.</p>\n<p>The third parameter, datatype, indicates the expected data type, which could be XML or JavaScript Object Notation (JSON), for example.</p>\n<p>The next parameter set in this example is the success property. This parameter takes a function that the results of the AJAX calls should be passed into for the webpage to do some work with. In this example, the results are parsed and added to the DOM so that users can see the results.</p>\n<p>The final property is set on our AJAX call, as good practice, is the error property so that any error conditions can be handled gracefully.</p>\n<p>The jQuery AJAX toolkit supports not only getting data, but also posting data to the server. The default request type is GET. To change a call to a post, you change the value of the<br>\nproperty to ‘POST’.</p>\n","<h1>Practice questions</h1>\n<p><strong>1. Read the entire question</strong><br>\n<em>Read a multi-choice question in its entirety before glancing over the answer options. Students often think they know what a question is asking before reading it and jump straight to the most logical answer. This is a big mistake and can cost you dearly on multiple-choice exams. Read each question thoroughly before reviewing answer options.</em></p>\n<p><strong>2. Answer it in your mind first</strong><br>\n<em>After reading a question, answer it in your mind before reviewing the answer options. This will help prevent you from talking yourself out of the correct answer.</em></p>\n<p><strong>3. Eliminate wrong answers</strong><br>\n<em>Eliminate answer options which you’re 100 percent sure are incorrect before selecting the answer you believe is correct. Even when you believe you know the right answer, first eliminating those answers you know are incorrect will ensure your answer choice is the correct choice.</em></p>\n<p><strong>4. Select the best answer</strong><br>\n<em>It’s important to select the best answer to the question being asked, not just an answer the seems correct. Often many answers will seem correct, but there is typically a best answer to the question that your professors is looking for.</em></p>\n<p><strong>5. Read every answer option</strong><br>\n<em>Read every answer option prior to choosing a final answer. This may seem like a no brainer to some, but it is a common mistake students make. As we pointed out in the previous section, there is usually a best answer to every multiple-choice question. If you quickly assume you know the correct answer, without. first reading every answer option, you may end up not selecting the best answer.</em></p>\n<p><strong>6. Answer the questions you know first</strong><br>\n<em>If you’re having difficulty answering a question, move on and come back to tackle it once you’ve answered all the questions you know. Sometimes answer easier question first can offer you insight into answering more challenging questions.</em></p>\n<p><strong>7. Pay attention to these words</strong><br>\n<em>Pay particularly close attention to the words; not, sometimes, always, and never. An answer that includes always must be irrefutable. If you can find a single counterexample, then the answer is not correct. The same holds true for the word never. If an answer option includes never a single counterexample will indicate the answer is not the correct.</em></p>\n<p>You can try the following practice papers:</p>\n<ul>\n<li><a href=\"https://applied.whitehat.org.uk/mod/quiz/view.php?id=6151\">12 practice questions</a></li>\n<li><a href=\"https://applied.whitehat.org.uk/mod/quiz/view.php?id=6155\">25 practice questions</a></li>\n<li><a href=\"https://applied.whitehat.org.uk/mod/quiz/view.php?id=3946\">50 practice questions</a></li>\n</ul>\n<p>Try and time yourself in the <a href=\"http://www.accelerated-ideas.com/exams/practice-exam.aspx?group=70-480&amp;fq=1&amp;qmax=40\">Timed quiz</a>.<br>\nGood luck in your exam!</p>\n"]